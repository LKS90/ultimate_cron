<?php
/**
 * @file
 * Ultimate Cron. Extend cron functionality in Drupal.
 *
 * @todo Add log view (with graph).
 * @todo Refactor Cron % offset stuff. Too mixed up and ungrokable code-wise and 'delta' is not consistent.
 *
 * hook_cron_alter(&$hooks)
 * hook_cron_schedule_alter(&$hooks)
 * hook_cron_pre_execute($name, $hook)
 * hook_cron_pre_execute_FUNCTION($hook)
 * hook_cron_post_execute($name, $hook)
 * hook_cron_post_execute_FUNCTION($hook)
 */


include dirname(__FILE__) . '/ultimate_cron.poorman.inc';
include dirname(__FILE__) . '/ultimate_cron.lock.inc';
include dirname(__FILE__) . '/ultimate_cron.job.inc';
include dirname(__FILE__) . '/ultimate_cron.plugin.inc';
include dirname(__FILE__) . '/ultimate_cron.signal.inc';
include dirname(__FILE__) . '/ultimate_cron.background_process_legacy.inc';

/**
 * Memory exhaust protection.
 * To reduce the risk of shutdown handlers failing, we reserve 2MiB of memory
 */
$GLOBALS['__RESERVED_MEMORY'] = str_repeat('0', 1024 * 1024 * 2);
$GLOBALS['ultimate_cron_shutdown_functions'] = array();

/**
 * Unleash the memory.
 */
function _ultimate_cron_out_of_memory_protection() {
  // error_log("RELEASING MEMORY");
  unset($GLOBALS['__RESERVED_MEMORY']);
  // error_log(print_r($GLOBALS['ultimate_cron_shutdown_functions'], TRUE));
  foreach ($GLOBALS['ultimate_cron_shutdown_functions'] as $function) {
    call_user_func_array($function['callback'], $function['arguments']);
  }
}

// The minor overhead in _drupal_shutdown_function() can mean the
// difference between life and death for our shutdown handlers in
// a memory exhaust situation. We want our shutdown handler to be
// called as early as possible. If no callbacks have been registrered
// yet, we use PHPs built-in register_shutdown_function() otherwise
// we ensure, that we are the first in the list of Drupals registered
// shutdown functions.
$callbacks = &drupal_register_shutdown_function();
if (empty($callbacks)) {
  register_shutdown_function('_ultimate_cron_out_of_memory_protection');
}
else {
  array_unshift($callbacks, array('callback' => '_ultimate_cron_out_of_memory_protection', 'arguments' => array()));
  // Reset internal array pointer just in case ...
  reset($callbacks);
}

/**
 * Register a shutdown function.
 */
function ultimate_cron_register_shutdown_function($callback) {
  $args = func_get_args();
  array_shift($args);
  $GLOBALS['ultimate_cron_shutdown_functions'][] = array(
    'callback' => $callback,
    'arguments' => $args,
  );
}
// ---------- CTOOLS INTEGRATION ----------

/**
 * Implements of hook_ctools_plugin_api().
 */
function ultimate_cron_ctools_plugin_api($module, $api) {
  if ($module == 'ultimate_cron' && $api == 'plugins') {
    return array('version' => 3);
  }
  if ($module == 'ultimate_cron' && $api == 'ultimate_cron') {
    return array('version' => 3);
  }
}

/**
 * Implement of hook_ctools_plugin_directory().
 */
function ultimate_cron_ctools_plugin_directory($module, $type) {
  // Safety: go away if CTools is not at an appropriate version.
  if (!module_invoke('ctools', 'api_version', '1.7')) {
    return;
  }
  $supported = array(
    'ctools' => array(
      'export_ui' => 'export_ui',
    ),
    'ultimate_cron' => array(
      'settings' => 'settings',
      'scheduler' => 'scheduler',
      'launcher' => 'launcher',
      'logger' => 'logger',
    ),
  );

  if (isset($supported[$module][$type])) {
    return "plugins/$module/" . $supported[$module][$type];
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function ultimate_cron_ctools_plugin_type() {
  return array(
    'settings' => array(
      'use hooks' => FALSE,
      'defaults' => array(
        'static' => array(
          'default plugin' => '',
          'title singular' => t('settings'),
          'title plural' => t('settings'),
          'title singular proper' => t('Settings'),
          'title plural proper' => t('Settings'),
          'class' => 'UltimateCronSettings',
          'multiple' => TRUE,
        ),
      ),
      'classes' => array('handler'),
      'cache' => TRUE,
    ),
    'scheduler' => array(
      'use hooks' => FALSE,
      'defaults' => array(
        'static' => array(
          'default plugin' => 'simple',
          'title singular' => t('scheduler'),
          'title plural' => t('schedulers'),
          'title singular proper' => t('Scheduler'),
          'title plural proper' => t('Schedulers'),
          'class' => 'UltimateCronScheduler',
        ),
      ),
      'classes' => array('handler'),
      'cache' => TRUE,
    ),
    'launcher' => array(
      'use hooks' => FALSE,
      'defaults' => array(
        'static' => array(
          'default plugin' => 'serial',
          'title singular' => t('launcher'),
          'title plural' => t('launchers'),
          'title singular proper' => t('Launcher'),
          'title plural proper' => t('Launchers'),
          'class' => 'UltimateCronLauncher',
        ),
      ),
      'classes' => array('handler'),
      'cache' => TRUE,
    ),
    'logger' => array(
      'use hooks' => FALSE,
      'defaults' => array(
        'static' => array(
          'default plugin' => 'database',
          'title singular' => t('logger'),
          'title plural' => t('loggers'),
          'title singular proper' => t('Logger'),
          'title plural proper' => t('Loggers'),
          'class' => 'UltimateCronLogger',
        ),
      ),
      'classes' => array('handler'),
      'cache' => TRUE,
    ),
  );
}

/**
 * Get plugin instance.
 */
function ultimate_cron_ctools_plugin_instance($name, $plugin) {
  static $cache;
  if (!isset($cache[$plugin['name']])) {
    $cache[$plugin['name']] = ctools_plugin_get_class($plugin, 'handler');
  }
  $class = $cache[$plugin['name']];
  return $class ? $class::factory($class, $name, $plugin) : FALSE;
}

/**
 * Load callback for plugins.
 */
function ultimate_cron_plugin_load($plugin_type, $name) {
  $cache = &drupal_static('ultimate_cron_plugin_load_all', array());
  if (!isset($cache[$plugin_type][$name])) {
    ultimate_cron_plugin_load_all($plugin_type);
    $cache[$plugin_type][$name] = $cache[$plugin_type][$name] ? $cache[$plugin_type][$name] : FALSE;
  }
  return $cache[$plugin_type][$name];
  $plugins = ultimate_cron_plugin_load_all($plugin_type);
  return $plugins[$name];
}

/**
 * Load all callback for plugins.
 */
function ultimate_cron_plugin_load_all($plugin_type) {
  $cache = &drupal_static('ultimate_cron_plugin_load_all', array());
  if (isset($cache[$plugin_type])) {
    return $cache[$plugin_type];
  }
  ctools_include('plugins');
  $plugin_infos = ctools_get_plugins('ultimate_cron', $plugin_type);
  $plugins = array();
  foreach ($plugin_infos as $name => $plugin) {
    if ($object = ultimate_cron_ctools_plugin_instance($name, $plugin)) {
      $plugins[$name] = $object;
    }
  }
  $cache[$plugin_type] = $plugins;
  return $cache[$plugin_type];
}

/**
 * Load callback for cron jobs.
 *
 * @param string $name
 *   Name of job.
 *
 * @return object
 *   Job object.
 */
function ultimate_cron_job_load_export_ui($name) {
  ctools_include('export');
  $result = ctools_export_load_object('ultimate_cron_job', 'names', array($name));
  if (isset($result[$name])) {
    $result[$name]->settings = !empty($result[$name]->settings) ? $result[$name]->settings : array();
    return $result[$name];
  }
  return FALSE;
}

/**
 * Load all callback for cron jobs.
 *
 * @return array
 *   Job objects.
 */
function ultimate_cron_job_load_all_export_ui($reset = FALSE) {
  ctools_include('export');
  if ($reset) {
    ctools_export_load_object_reset('ultimate_cron_job');
  }
  $results = ctools_export_load_object('ultimate_cron_job');
  foreach ($results as $name => $result) {
    $result->disabled = ultimate_cron_job_get_status($name);
    $result->settings = !empty($result->settings) ? $result->settings : array();
  }
  return $results;
}

/**
 * Export UI load callback.
 */
function ultimate_cron_job_load($name) {
  $jobs = ultimate_cron_job_load_all();
  return $jobs[$name];
}

/**
 * Prepare a UltimateCronJob object with hook data, etc.
 */
function ultimate_cron_prepare_job($name, $hook, $job = NULL) {
  $schema = ctools_export_get_schema('ultimate_cron_job');
  $export = $schema['export'];

  if (!$job) {
    $job = ctools_export_crud_new('ultimate_cron_job');
    $job->name = $name;
    $job->title = $hook['title'];
    $job->description = $hook['description'];
    $job->table = 'ultimate_cron_job';
    $job->export_type = EXPORT_IN_CODE;
    $job->{$export['export type string']} = t('Default');
    $job->disabled = ultimate_cron_job_get_status($name);
    if (!isset($job->disabled)) {
      $job->disabled = !$hook['enabled'];
    }
  }
  else {
    $job->{$export['export type string']} = t('Overridden');
    $job->export_type = EXPORT_IN_CODE | EXPORT_IN_DATABASE;
  }

  // We do alot of += on arrays. Let's make sure we have an array to begin with.
  $plugin_types = ctools_plugin_get_plugin_type_info();
  foreach ($plugin_types['ultimate_cron'] as $plugin_type => $info) {
    $class = $info['defaults']['static']['class'];
    if ($class::$multiple) {
      $plugins = ultimate_cron_plugin_load_all($plugin_type);
      foreach ($plugins as $plugin) {
        if (!isset($job->settings[$plugin_type][$plugin->name])) {
          $job->settings[$plugin_type][$plugin->name] = array();
        }
      }
    }
    else {
      if (!isset($job->settings[$plugin_type])) {
        $job->settings[$plugin_type] = array();
      }
    }
  }
  $job->hook = $hook;
  return $job;
}

/**
 * Export UI load all callback.
 */
function ultimate_cron_job_load_all($reset = FALSE) {
  static $cache = NULL;
  if (!$reset && isset($cache)) {
    return $cache;
  }

  $jobs = ultimate_cron_job_load_all_export_ui($reset);

  foreach (ultimate_cron_get_hooks($reset) as $name => $hook) {
    $jobs[$name] = ultimate_cron_prepare_job($name, $hook, isset($jobs[$name]) ? $jobs[$name] : NULL);
  }

  $cache = $jobs;
  UltimateCronPlugin::hook_cron_alter($cache);

  return $cache;
}

/**
 * Export UI set status callback.
 */
function ultimate_cron_job_set_status($object, $status) {
  if (is_object($object)) {
    $name = $object->name;
  }
  else {
    $name = $object;
  }
  variable_set('default_ultimate_cron_job_' . $name, $status ? TRUE : FALSE);
}

/**
 * Get status "callback".
 */
function ultimate_cron_job_get_status($name) {
  return variable_get('default_ultimate_cron_job_' . $name, NULL);
}

// ---------- HOOKS ----------

/**
 * Implements hook_init().
 */
function ultimate_cron_init() {
  _ultimate_cron_variable_load('cron_last');
}

/**
 * Implements hook_help().
 */
function ultimate_cron_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ultimate_cron':
      // Return a line-break version of the module README.
      return '<pre>' . file_get_contents(dirname(__FILE__) . '/README.txt') . '</pre>';

    case 'admin/build/cron':
      return '<p>' . t('Here you can see the crontab settings for each job available') . '</p>';

    case 'admin/build/cron/settings':
      return '<p>' . t('Here you can change the crontab settings for each job available') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function ultimate_cron_menu() {
  $items = array();

  $items['admin/config/system/cron/settings'] = array(
    'title' => 'Settings',
    'description' => 'Cron settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ultimate_cron_settings_form'),
    'access arguments' => array('administer ultimate cron'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ultimate_cron.admin.inc',
  );

  $items['admin/config/system/cron/poorman'] = array(
    'title' => 'Poormans cron',
    'description' => 'Trigger poormans cron',
    'page callback' => 'ultimate_cron_poorman_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ultimate_cron.poorman.inc',
  );

  ctools_include('plugins');
  $plugin_types = ctools_plugin_get_plugin_type_info();
  $weight = 0;
  foreach ($plugin_types['ultimate_cron'] as $plugin_type => $info) {
    $static = $info['defaults']['static'];
    $class = $static['class'];
    $items["admin/config/system/cron/$plugin_type"] = array(
      'type' => MENU_LOCAL_TASK,
      'title' => $static['title plural proper'],
      'description' => "Administer " . $static['title plural'],
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ultimate_cron_plugin_form', $plugin_type),
      'access arguments' => array('administer ultimate cron'),
      'file' => 'ultimate_cron.admin.inc',
      'weight' => 2 + $weight,
    );
    $items["admin/config/system/cron/$plugin_type/settings"] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'title' => $class::$multiple ? 'List' : 'Settings',
      'weight' => -1 + $weight,
    );
    $weight++;
    foreach (ultimate_cron_plugin_load_all($plugin_type) as $name => $plugin) {
      if (!$plugin->isValid()) {
        continue;
      }
      $items["admin/config/system/cron/$plugin_type/$name"] = array(
        'type' => MENU_LOCAL_TASK,
        'title' => $plugin->title,
        'description' => $plugin->description,
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
          'ultimate_cron_plugin_settings',
          $plugin_type,
          $name
        ),
        'access arguments' => array('administer ultimate cron'),
        'file' => 'ultimate_cron.admin.inc',
        'weight' => $weight++,
      );
    }
  }

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Steal the run-cron, so when you "run cron manually" from the status-reports
 * page the ultimate_cron cron handler is run.
 */
function ultimate_cron_menu_alter(&$items) {
  // Relocate ctools export ui to main tab.
  $items['admin/config/system/cron'] = $items['admin/config/system/cron/jobs'];
  $items['admin/config/system/cron/jobs'] = array(
    'title' => 'Jobs',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 20,
  );
  unset($items['admin/config/system/cron']['type']);

  $steal = &$items['admin/reports/status/run-cron'];
  $steal['page callback'] = 'ultimate_cron_run_scheduled_page';
  $steal['page arguments'] = array();
  $steal['module'] = 'ultimate_cron';
  $steal['file'] = 'ultimate_cron.module';
}

/**
 * Implements hook_permission().
 */
function ultimate_cron_permission() {
  return array(
    'administer ultimate cron' => array(
      'title' => t('Administer Ultimate Cron'),
      'description' => t('Lets you configure everything in Ultimate Cron')
    )
  );
}

/**
 * Implements hook_cron_queue_info().
 *
 * Used for code injection in order to hijack cron runs.
 */
function ultimate_cron_cron_queue_info() {
  static $processed = FALSE;
  if (!$processed) {
    $processed = TRUE;
    if (basename($_SERVER['PHP_SELF']) == 'cron.php') {
      ultimate_cron_cron_run();
      exit;
    }
  }
  return array();
}

/**
 * Plugin clean cron job.
 */
function ultimate_cron_plugin_cleanup($job, $arguments) {
  $plugin_type = $arguments['plugin_type'];
  $name = $arguments['name'];
  $plugin = ultimate_cron_plugin_load($plugin_type, $name);
  $plugin->cleanup();
}

/**
 * Implements hook_cronapi().
 *
 * Exposes hook_cron() and cron queues to Ultimate Cron.
 */
function ultimate_cron_cronapi() {
  $items = array();

  ctools_include('plugins');
  $plugin_types = ctools_plugin_get_plugin_type_info();
  foreach ($plugin_types['ultimate_cron'] as $plugin_type => $info) {
    foreach (ultimate_cron_plugin_load_all($plugin_type) as $name => $plugin) {
      $items["ultimate_cron_plugin_{$plugin_type}_{$name}_cleanup"] = array(
        'title' => t('Ultimate Cron @type @title cleanup', array(
          '@type' => $info['defaults']['static']['title singular proper'],
          '@title' => $plugin->title,
        )),
        'callback' => 'ultimate_cron_plugin_cleanup',
        'callback_arguments' => array(
          'plugin_type' => $plugin_type,
          'name' => $name,
        ),
      );
    }
  }

  // Grab the defined cron queues.
  $queues = _ultimate_cron_get_queues();

  foreach ($queues as $name => $info) {
    if (!empty($info['skip on cron'])) {
      continue;
    }

    $items['queue_' . $name] = array(
      'title' => t('Queue: !name', array('!name' => $name)),
      'callback' => 'ultimate_cron_queue_cron',
      'scheduler' => array(
        // 'name' => 'simple',
        'simple' => array(
          'rules' => array('* * * * *'),
        ),
        'crontab' => array(
          'rules' => array('* * * * *'),
        ),
      ),
      'settings' => array(
        'queue' => array(
          'name' => $name,
          'worker callback' => $info['worker callback'],
        ),
      ),
      'tags' => array('queue'),
      'module' => $info['module'],
    );
    if (isset($info['time'])) {
      $items['queue_' . $name]['settings']['queue']['time'] = $info['time'];
    }
  }
  return $items;
}

/**
 * Process a cron queue.
 */
function ultimate_cron_queue_cron($job) {
  $settings = $job->getPluginSettings('settings');
  $queue = DrupalQueue::get($settings['queue']['name']);
  $function = $settings['queue']['worker callback'];

  // Re-throttle.
  $job->getPlugin('settings', 'queue')->throttle($job);

  $end = microtime(TRUE) + $settings['queue']['time'];
  $items = 0;
  while (microtime(TRUE) < $end && $item = $queue->claimItem($settings['queue']['lease_time'])) {
    if (!$item) {
      if ($settings['queue']['empty_delay']) {
        usleep($settings['queue']['empty_delay'] * 1000000);
        continue;
      }
      else {
        break;
      }
    }
    try {
      if ($settings['queue']['item_delay']) {
        if ($items == 0) {
          // Move the boundary if using a throttle, to avoid waiting for nothing.
          $end -= $settings['queue']['item_delay'] * 1000000;
        }
        else {
          // Sleep before retrieving.
          usleep($settings['queue']['item_delay'] * 1000000);
        }
      }
      $function($item->data);
      $queue->deleteItem($item);
      $items++;
    }
    catch (Exception $e) {
      // Just continue ...
      watchdog($job->hook['module'], "Queue item @item_id from queue @queue failed with message @message", array(
        '@item_id' => $item->item_id,
        '@queue' => $settings['queue']['name'],
        '@message' => $e->getMessage()
      ), WATCHDOG_ERROR);
    }
  }
  watchdog($job->hook['module'], 'Processed @items items from queue @queue', array(
    '@items' => $items,
    '@queue' => $settings['queue']['name'],
  ), WATCHDOG_INFO);

  return;
}

/**
 * Implements hook_watchdog().
 */
function ultimate_cron_watchdog(array $log_entry) {
  UltimateCronLogger::hook_watchdog($log_entry);
}

// ---------- FIXUPS FOR CORE  ----------

/**
 * Implements hook_cron_alter().
 *
 * Add better description to core modules.
 */
function ultimate_cron_cron_alter(&$hooks) {
  $update['dblog_cron']['title'] = t('Remove expired log messages and flood control events');
  $update['field_cron']['title'] = t('Purges deleted Field API data');
  $update['filter_cron']['title'] = t('Expire outdated filter cache entries');
  $update['node_cron']['title'] = t('Mark old nodes as read');
  $update['search_cron']['title'] = t('Update indexes');
  $update['system_cron']['title'] = t('Cleanup (batch, flood, temp-files, etc.)');
  $update['aggregator_cron']['title'] = t('Refresh feeds');
  $update['openid_cron']['title'] = t('Remove expired nonces from the database');
  $update['ping_cron']['title'] = t('Notify remote sites');
  $update['poll_cron']['title'] = t('Close expired polls');
  $update['statistics_cron']['title'] = t('Reset counts and clean up');
  $update['trigger_cron']['title'] = t('Run actions for cron triggers');
  $update['tracker_cron']['title'] = t('Update tracker index');
  $update['update_cron']['title'] = t('Check system for updates');
  $update['dblog_cron']['configure'] = 'admin/config/development/logging';

  foreach ($update as $name => $data) {
    if (isset($hooks[$name])) {
      foreach ($data as $key => $value) {
        $hooks[$name][$key] = $value;
      }
    }
  }
}

// ---------- CALLBACK FUNCTIONS ----------

/**
 * Run cron.
 *
 * The cron handler takes over the normal Drupal cron handler,
 * and runs the normal hook_cron() plus the hook_cronapi().
 */
function ultimate_cron_cron_run() {
  if (variable_get('install_task', FALSE) != 'done') {
    return;
  }

  // If run from core cron through CLI then don't do anything (drush core-cron)
  if (drupal_is_cli()) {
    return;
  }

  ultimate_cron_run_scheduled(FALSE);
  exit;
}

// ---------- HELPER FUNCTIONS ----------

/**
 * Load a variable by-passing the cache.
 */
function _ultimate_cron_variable_load($name) {
  if ($value = db_query("SELECT value FROM {variable} WHERE name = :name", array(':name' => $name))->fetchField()) {
    $value = unserialize($value);
  }
  global $conf;
  $conf[$name] = $value;
}

/**
 * Variable set with cache by-pass.
 */
function _ultimate_cron_variable_save($name, $value) {
  global $conf;
  db_merge('variable')->key(array('name' => $name))->fields(array('value' => serialize($value)))->execute();
  $conf[$name] = $value;
}

/**
 * Get cron queues and static cache them.
 */
function _ultimate_cron_get_queues() {
  static $queues = NULL;
  if (!isset($queues)) {
    $queues = array();
    foreach (module_implements('cron_queue_info') as $module) {
      $items = module_invoke($module, 'cron_queue_info');
      if (is_array($items)) {
        foreach ($items as &$item) {
          $item['module'] = $module;
        }
        $queues += $items;
      }
    }
    // $queues = module_invoke_all('cron_queue_info');
    drupal_alter('cron_queue_info', $queues);
  }
  return $queues;
}

/**
 * Get a specific hook.
 */
function ultimate_cron_get_hook($name, $reset = FALSE) {
  $jobs = ultimate_cron_get_hooks($reset);
  return $jobs[$name];
}

/**
 * Get jobs declared by a module.
 *
 * @param string $module
 *   Name of module.
 *
 * @return array
 *   Job definitions.
 */
function ultimate_cron_get_module_hooks($module) {
  $items = array();
  if (module_hook($module, 'cronapi')) {
    $items = module_invoke($module, 'cronapi', NULL);

    if (!is_array($items)) {
      // API Version 1.x
      $items = array();

      $list = module_invoke($module, 'cronapi', 'list');
      if (!$list) {
        $list = array();
      }
      foreach ($list as $name => $title) {
        $items[$name] = array('title' => $title);
      }
      foreach ($items as $name => &$item) {
        $item['api_version'] = 'ultimate_cron-1';
        $rules = module_invoke($module, 'cronapi', 'rule', $name);
        $rules = $rules ? $rules : array();

        $settings = (array) module_invoke($module, 'cronapi', 'settings', $name);
        if (empty($settings['rules']) && $rules) {
          $settings['rules'] = is_array($rules) ? $rules : array($rules);
        }

        if (!empty($settings['rules'])) {
          $settings['scheduler'] = array(
            'name' => 'crontab',
            'crontab' => array(
              'rules' => $settings['rules']
            ),
          );
          unset($settings['rules']);
        }

        $settings += array(
          'configure' => module_invoke($module, 'cronapi', 'configure', $name),
        );
        $item += $settings;
      }
    }
    else {
      foreach ($items as &$item) {
        if (!empty($item['rule'])) {
          // Elysia 2.x compatibility.
          $item['scheduler'] = array(
            'name' => 'crontab',
            'crontab' => array(
              'rules' => array($item['rule']),
            ),
          );
          $item['api_version'] = 'elysia_cron-2';
          $item['title'] = $item['description'];
        }
      }
    }
  }

  // Add hook_cron() if applicable.
  if (module_hook($module, 'cron')) {
    if (empty($items["{$module}_cron"])) {
      $items["{$module}_cron"] = array();
    }

    $info = system_get_info('module', $module);
    $items["{$module}_cron"] += array(
      'module' => $module,
      'title' => 'Default cron handler',
      'configure' => empty($info['configure']) ? NULL : $info['configure'],
    );
  }

  // Add default settings.
  static $plugin_types;
  static $plugins;
  if (!isset($plugin_types)) {
    ctools_include('plugins');
    $plugin_types = ctools_plugin_get_plugin_type_info();
    $plugins = array();
    foreach ($plugin_types['ultimate_cron'] as $plugin_type => $info) {
      $plugins[$plugin_type] = ultimate_cron_plugin_load_all($plugin_type);
    }
  }

  foreach ($items as $name => &$item) {
    foreach ($plugin_types['ultimate_cron'] as $plugin_type => $info) {
      $static = $info['defaults']['static'];
      $class = $static['class'];
      $item += array(
        $plugin_type => array(),
      );
      if (!$class::$multiple) {
        $item[$plugin_type] += array(
          'name' => variable_get('ultimate_cron_plugin_' . $plugin_type . '_default', $static['default plugin']),
        );
      }

      foreach ($plugins[$plugin_type] as $plugin_name => $plugin) {
        if (!$plugin->isValid()) {
          continue;
        }
        $item[$plugin_type] += array(
          $plugin_name => array(),
        );
      }
    }

    $item += array(
      'title' => $name,
      'description' => isset($item['title']) ? $item['title'] : $name,
      'module' => $module,
      'file path' => drupal_get_path('module', $module),
      'callback_arguments' => array(),
      'callback' => $name,
      'enabled' => TRUE,
      'tags' => array(),
      'api_version' => 'ultimate_cron-2',
    );
  }

  return $items;
}

/**
 * Get cron jobs available.
 *
 * @return array
 *   List of jobs.
 */
function ultimate_cron_get_hooks($reset = FALSE) {
  static $cache = NULL;
  if (!$reset && isset($cache)) {
    return $cache;
  }

  $cache = cache_get('ultimate_cron_hooks');
  if ($cache && $cache->data) {
    $cache = $cache->data;
    return $cache;
  }

  $hooks = array();
  // Generate list of jobs.
  $modules = module_list();
  foreach ($modules as $module) {
    $hooks += ultimate_cron_get_module_hooks($module);
  }

  // Allow other to manipulate the hook list.
  drupal_alter('cron', $hooks);

  $cache = $hooks;
  cache_set('ultimate_cron_hooks', $cache);
  return $cache;
}

// ---------- CRON RULE FUNCTIONS ----------

/**
 * Form element validator for cron rules.
 */
function ultimate_cron_plugin_crontab_element_validate_rule($element, &$form_state) {
  $rules = array();
  $value = $element['#value'];
  if (!empty($value)) {
    $rules = explode(',', $value);
    $rules = array_map('trim', $rules);
  }
  foreach ($rules as $rule) {
    if (!ultimate_cron_validate_rule($rule)) {
      form_error($element, t('%name: %rule is not a valid rule.', array('%name' => $element['#title'], '%rule' => $rule)));
    }
  }
}

/**
 * Check if rule is valid.
 *
 * @param string $rule
 *   rule to validate.
 *
 * @return bool
 *   TRUE if valid, FALSE if not.
 */
function ultimate_cron_validate_rule($rule) {
  require_once 'CronRule.class.php';
  $cron = new CronRule($rule);
  if (!$cron->isValid()) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}


/**
 * Return blank values for all keys in an array.
 *
 * @param array $array
 *   Array to generate blank values from.
 *
 * @return array
 *   Array with same keys as input, but with blank values (empty string).
 */
function ultimate_cron_blank_values($array) {
  $result = array();
  foreach ($array as $key => $value) {
    switch (gettype($value)) {
      case 'array':
        $result[$key] = array();
        break;

      default:
        $result[$key] = '';
    }
  }
  return $result;
}

/**
 * Page callback for running scheduled jobs.
 */
function ultimate_cron_run_scheduled_page() {
  ultimate_cron_run_scheduled(TRUE);
  if (isset($_SERVER['HTTP_REFERER']) && empty($_GET['destination'])) {
    $_GET['destination'] = parse_url($_SERVER['HTTP_REFERER'], PHP_URL_PATH);
  }
  drupal_goto('admin/config/system/cron');
}

/**
 * Run scheduled jobs.
 */
function ultimate_cron_run_scheduled($redirect = TRUE) {
  if (!variable_get('maintenance_mode', 0)) {
    $launchers = array();
    foreach (ultimate_cron_job_load_all() as $job) {
      $launchers[$job->getPlugin('launcher')->name] = TRUE;
    }
    if (empty($launchers)) {
      ultimate_cron_watchdog_message('ultimate_cron', 'No launchers to invoke?', array(), WATCHDOG_ERROR, 'error', $redirect);
      return;
    }
    $settings = ultimate_cron_plugin_load('settings', 'general')->getDefaultSettings();
    $dispatch = $redirect || count($launchers) > 1;

    foreach (array_keys($launchers) as $launcher) {
      $plugin = ultimate_cron_plugin_load('launcher', $launcher);
      if (!$plugin) {
        ultimate_cron_watchdog_message('ultimate_cron', 'Launcher @name not found!', array(
          '@name' => $launcher,
        ), WATCHDOG_ERROR, 'error', $redirect);
        return;
      }

      if ($settings['poorman'] && $dispatch) {
        ultimate_cron_poorman_launcher($plugin->name);
      }
      else {
        ultimate_cron_run_launcher($plugin);
      }

      ultimate_cron_watchdog_message('ultimate_cron', 'Launcher @title invoked', array(
        '@title' => $plugin->title,
      ), WATCHDOG_INFO, 'status', $redirect);
    }
  }
  else {
    ultimate_cron_watchdog_message('ultimate_cron', 'Cannot launch scheduled jobs while in maintenance mode!', array(), WATCHDOG_ERROR, 'error', $redirect);
  }
  return;
}

/**
 * Log message either to watchdog or to screen.
 */
function ultimate_cron_watchdog_message($type, $msg, $args, $severity, $status, $redirect) {
  if ($redirect) {
    drupal_set_message(t($msg, $args), $status);
  }
  else {
    watchdog($type, $msg, $args, $severity);
  }
}

/**
 * Custom sort callback for sorting by start time.
 */
function _ultimate_cron_sort_jobs_by_start_time($a, $b) {
  return $a->log_entry->start_time == $b->log_entry->start_time ? 0 : ($a->log_entry->start_time > $b->log_entry->start_time ? 1 : -1);
}

/**
 * Stripped debug backtrace.
 *
 * For debugging purposes of course ...
 */
function stripped_debug_backtrace() {
  $debug = debug_backtrace();
  foreach ($debug as &$d) unset($d['args'], $d['object']);
  return $debug;
}
