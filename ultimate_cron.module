<?php
/**
 * @file
 * Ultimate Cron. Extend cron functionality in Drupal.
 *
 * @todo Add log view (with graph).
 * @todo Refactor Cron % offset stuff. Too mixed up and ungrokable code-wise and 'delta' is not consistent.
 *
 * hook_cron_alter(&$hooks)
 * hook_cron_schedule_alter(&$hooks)
 * hook_cron_pre_execute($name, $hook)
 * hook_cron_pre_execute_FUNCTION($hook)
 * hook_cron_post_execute($name, $hook)
 * hook_cron_post_execute_FUNCTION($hook)
 */


include dirname(__FILE__) . '/ultimate_cron.poorman.inc';
include dirname(__FILE__) . '/ultimate_cron.lock.inc';
include dirname(__FILE__) . '/ultimate_cron.job.inc';
include dirname(__FILE__) . '/ultimate_cron.plugin.inc';
include dirname(__FILE__) . '/ultimate_cron.signal.inc';
include dirname(__FILE__) . '/ultimate_cron.background_process_legacy.inc';

/**
 * Memory exhaust protection.
 * To reduce the risk of shutdown handlers failing, we reserve 2MiB of memory
 * by default. This value is overridable.
 */

$GLOBALS['__RESERVED_MEMORY'] = str_repeat('0', variable_get('ultimate_cron_reserve_memory', 1024 * 1024 * 2));
$GLOBALS['ultimate_cron_shutdown_functions'] = array();

/**
 * The shutdown function itself is also overridable, in case it is necessary to
 * add it earlier, say settings.php.
 * Remeber to invoke the registered ultimate cron shutdown handlers.
 * If the function exists, we assume that the register_shutdown_handler() has
 * also been setup correctly.
 */
if (!function_exists('_ultimate_cron_out_of_memory_protection')) {
  /**
   * Shutdown hander that unleash the memory reserved.
   */
  function _ultimate_cron_out_of_memory_protection() {
    // error_log("RELEASING MEMORY");
    unset($GLOBALS['__RESERVED_MEMORY']);
    // error_log(print_r($GLOBALS['ultimate_cron_shutdown_functions'], TRUE));
    foreach ($GLOBALS['ultimate_cron_shutdown_functions'] as $function) {
      call_user_func_array($function['callback'], $function['arguments']);
    }
  }


  // The minor overhead in _drupal_shutdown_function() can mean the
  // difference between life and death for our shutdown handlers in
  // a memory exhaust situation. We want our shutdown handler to be
  // called as early as possible. If no callbacks have been registrered
  // yet, we use PHPs built-in register_shutdown_function() otherwise
  // we ensure, that we are the first in the list of Drupals registered
  // shutdown functions.
  $callbacks = &drupal_register_shutdown_function();
  if (empty($callbacks)) {
    register_shutdown_function('_ultimate_cron_out_of_memory_protection');
  }
  else {
    array_unshift($callbacks, array('callback' => '_ultimate_cron_out_of_memory_protection', 'arguments' => array()));
    // Reset internal array pointer just in case ...
    reset($callbacks);
  }
}

/**
 * Registers a function for execution on shutdown.
 *
 * Wrapper for register_shutdown_function() that catches thrown exceptions to
 * avoid "Exception thrown without a stack frame in Unknown".
 *
 * This is a duplicate of the built-in functionality in Drupal, however we
 * need to perform our tasks before that.
 *
 * @param callback $callback
 *   The shutdown function to register.
 * @param ...
 *   Additional arguments to pass to the shutdown function.
 *
 * @return array
 *   Array of shutdown functions to be executed.
 *
 * @see register_shutdown_function()
 * @ingroup php_wrappers
 */
function ultimate_cron_register_shutdown_function($callback) {
  $args = func_get_args();
  array_shift($args);
  $GLOBALS['ultimate_cron_shutdown_functions'][] = array(
    'callback' => $callback,
    'arguments' => $args,
  );
}

// ---------- CTOOLS INTEGRATION ----------

/**
 * Implements hook_ctools_plugin_api().
 */
function ultimate_cron_ctools_plugin_api($module, $api) {
  if ($module == 'ultimate_cron' && $api == 'plugins') {
    return array('version' => 3);
  }
  if ($module == 'ultimate_cron' && $api == 'ultimate_cron') {
    return array('version' => 3);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * This module implements plugins for cTools and Ultimate Cron.
 */
function ultimate_cron_ctools_plugin_directory($module, $type) {
  // Safety: go away if CTools is not at an appropriate version.
  if (!module_invoke('ctools', 'api_version', '1.7')) {
    return;
  }
  $supported = array(
    'ctools' => array(
      'export_ui' => 'export_ui',
    ),
    'ultimate_cron' => array(
      'settings' => 'settings',
      'scheduler' => 'scheduler',
      'launcher' => 'launcher',
      'logger' => 'logger',
    ),
  );

  if (isset($supported[$module][$type])) {
    return "plugins/$module/" . $supported[$module][$type];
  }
}

/**
 * Implements hook_ctools_plugin_type().
 *
 * Ultimate Cron provides for plugins.
 *
 * Settings  : Attaches settings to a cron job
 * Scheduler : Determines when a job should run.
 * Launcher  : Responsible for launching/running the job.
 * Logger    : The backend for a jobs logs.
 */
function ultimate_cron_ctools_plugin_type() {
  return array(
    'settings' => array(
      'use hooks' => FALSE,
      'defaults' => array(
        'static' => array(
          'default plugin' => '',
          'title singular' => t('settings'),
          'title plural' => t('settings'),
          'title singular proper' => t('Settings'),
          'title plural proper' => t('Settings'),
          'class' => 'UltimateCronSettings',
          'multiple' => TRUE,
        ),
      ),
      'classes' => array('handler'),
      'cache' => TRUE,
    ),
    'scheduler' => array(
      'use hooks' => FALSE,
      'defaults' => array(
        'static' => array(
          'default plugin' => 'simple',
          'title singular' => t('scheduler'),
          'title plural' => t('schedulers'),
          'title singular proper' => t('Scheduler'),
          'title plural proper' => t('Schedulers'),
          'class' => 'UltimateCronScheduler',
        ),
      ),
      'classes' => array('handler'),
      'cache' => TRUE,
    ),
    'launcher' => array(
      'use hooks' => FALSE,
      'defaults' => array(
        'static' => array(
          'default plugin' => 'serial',
          'title singular' => t('launcher'),
          'title plural' => t('launchers'),
          'title singular proper' => t('Launcher'),
          'title plural proper' => t('Launchers'),
          'class' => 'UltimateCronLauncher',
        ),
      ),
      'classes' => array('handler'),
      'cache' => TRUE,
    ),
    'logger' => array(
      'use hooks' => FALSE,
      'defaults' => array(
        'static' => array(
          'default plugin' => 'database',
          'title singular' => t('logger'),
          'title plural' => t('loggers'),
          'title singular proper' => t('Logger'),
          'title plural proper' => t('Loggers'),
          'class' => 'UltimateCronLogger',
        ),
      ),
      'classes' => array('handler'),
      'cache' => TRUE,
    ),
  );
}

/**
 * Get plugin instance.
 *
 * @param string $type
 *   Type of the plugin (settings, scheduler, launcher, logger)
 *
 * @return object
 *   The instance of the plugin (singleton).
 */
function ultimate_cron_ctools_plugin_instance($type, $plugin) {
  static $cache;
  if (!isset($cache[$plugin['name']])) {
    $cache[$plugin['name']] = ctools_plugin_get_class($plugin, 'handler');
  }
  $class = $cache[$plugin['name']];
  return $class ? $class::factory($class, $type, $plugin) : FALSE;
}

/**
 * Load callback for plugins.
 *
 * @param string $type
 *   Type of the plugin (settings, scheduler, launcher, logger)
 * @param string $name
 *   Name of the plugin (general, queue, serial, database, etc.)
 *
 * @return object
 *   The instance of the plugin (singleton).
 */
function ultimate_cron_plugin_load($type, $name) {
  $cache = &drupal_static('ultimate_cron_plugin_load_all', array());
  if (!isset($cache[$type][$name])) {
    ultimate_cron_plugin_load_all($type);
    $cache[$type][$name] = $cache[$type][$name] ? $cache[$type][$name] : FALSE;
  }
  return $cache[$type][$name];
}

/**
 * Load all callback for plugins.
 *
 * @param string $type
 *   Type of the plugin (settings, scheduler, launcher, logger)
 *
 * @return array
 *   The instances of the plugin type (singletons).
 */
function ultimate_cron_plugin_load_all($type) {
  $cache = &drupal_static('ultimate_cron_plugin_load_all', array());
  if (isset($cache[$type])) {
    return $cache[$type];
  }
  ctools_include('plugins');
  $plugin_infos = ctools_get_plugins('ultimate_cron', $type);
  $plugins = array();
  foreach ($plugin_infos as $name => $plugin) {
    if ($object = ultimate_cron_ctools_plugin_instance($name, $plugin)) {
      $plugins[$name] = $object;
    }
  }
  $cache[$type] = $plugins;
  return $cache[$type];
}

/**
 * Load all jobs available from cTools export.
 *
 * This function loads the raw job "entities", and is NOT the function
 * exposed to cTools export and export ui.
 *
 * @param boolean $reset
 *   Reset the object cache.
 *
 * @return array
 *   UltimateCronJob objects.
 */
function ultimate_cron_job_load_all_raw($reset = FALSE) {
  ctools_include('export');
  if ($reset) {
    ctools_export_load_object_reset('ultimate_cron_job');
  }
  $results = ctools_export_load_object('ultimate_cron_job');
  foreach ($results as $name => $result) {
    $result->disabled = ultimate_cron_job_get_status($name);
    $result->settings = !empty($result->settings) ? $result->settings : array();
  }
  return $results;
}

/**
 * Export UI load callback.
 *
 * @param string $name
 *   Name of the job to load.
 * @param boolean $reset
 *   (optional) Reset the ctools export object cache.
 *
 * @return UltimateCronJob
 *   The job loaded.
 */
function ultimate_cron_job_load($name, $reset = FALSE) {
  $jobs = ultimate_cron_job_load_all($reset);
  return isset($jobs[$name]) ? $jobs[$name] : FALSE;
}

/**
 * Export UI load multiple callback.
 *
 * @param array $names
 *   Names of the jobs to load.
 * @param boolean $reset
 *   (optional) Reset the ctools export object cache.
 *
 * @return array
 *   Array of UltimateCronJob objects.
 */
function ultimate_cron_job_load_multiple($names, $reset = FALSE) {
  $jobs = array();
  foreach (ultimate_cron_job_load_all($reset) as $name => $job) {
    if (in_array($name, $names)) {
      $jobs[$name] = $job;
    }
  }
  return $jobs;
}

/**
 * Export UI load all callback.
 *
 * @param boolean $reset
 *   (optional) Reset the ctools export object cache.
 *
 * @return array
 *   Array of UltimateCronJob objects.
 */
function ultimate_cron_job_load_all($reset = FALSE) {
  static $cache = NULL;
  if (!$reset && isset($cache)) {
    return $cache;
  }

  $jobs = ultimate_cron_job_load_all_raw($reset);

  foreach (ultimate_cron_get_hooks($reset) as $name => $hook) {
    $jobs[$name] = ultimate_cron_prepare_job($name, $hook, isset($jobs[$name]) ? $jobs[$name] : NULL);
  }

  $cache = $jobs;
  UltimateCronPlugin::hook_cron_alter($cache);

  return $cache;
}

/**
 * Prepare a UltimateCronJob object with hook data, etc.
 *
 * @param string $name
 *   Name of the job.
 * @param array $hook
 *   The cron hook data from hook_cronapi(), etc.
 * @param UltimateCronJob $job
 *   (optional) The job to prepare with the hook data. If no job is given,
 *   a new blank UltimateCronJob object will be used.
 *
 * @return UltimateCronJob
 *   The prepared UltimateCronJob object.
 */
function ultimate_cron_prepare_job($name, $hook, $job = NULL) {
  $schema = ctools_export_get_schema('ultimate_cron_job');
  $export = $schema['export'];

  if (!$job) {
    $job = ctools_export_crud_new('ultimate_cron_job');
    $job->name = $name;
    $job->title = $hook['title'];
    $job->description = $hook['description'];
    $job->table = 'ultimate_cron_job';
    $job->export_type = EXPORT_IN_CODE;
    $job->{$export['export type string']} = t('Default');
    $job->disabled = ultimate_cron_job_get_status($name);
    if (!isset($job->disabled)) {
      $job->disabled = !$hook['enabled'];
    }
  }
  else {
    $job->{$export['export type string']} = t('Overridden');
    $job->export_type = EXPORT_IN_CODE | EXPORT_IN_DATABASE;
  }

  // We do alot of += on arrays. Let's make sure we have an array to begin with.
  $plugin_types = ctools_plugin_get_plugin_type_info();
  foreach ($plugin_types['ultimate_cron'] as $plugin_type => $info) {
    $class = $info['defaults']['static']['class'];
    if ($class::$multiple) {
      $plugins = ultimate_cron_plugin_load_all($plugin_type);
      foreach ($plugins as $plugin) {
        if (!isset($job->settings[$plugin_type][$plugin->name])) {
          $job->settings[$plugin_type][$plugin->name] = array();
        }
      }
    }
    else {
      if (!isset($job->settings[$plugin_type])) {
        $job->settings[$plugin_type] = array();
      }
    }
  }
  $job->hook = $hook;
  return $job;
}

/**
 * Export UI set status callback.
 *
 * Set job status and log it.
 *
 * @param mixed $object
 *   Name of job or UltimateCronJob object.
 * @param boolean $status
 *   The status to set (TRUE = disabled).
 */
function ultimate_cron_job_set_status($object, $status) {
  if (is_object($object)) {
    $name = $object->name;
    $job = $object;
  }
  else {
    $name = $object;
    $job = ultimate_cron_job_load($name);
  }

  $log = $job->startLog(uniqid($job->name, TRUE), 'modification');
  $log->log($job->name, 'Job @status by ' . $log->formatUser(), array(
    '@status' => $status ? t('disabled') : t('enabled'),
  ), WATCHDOG_INFO);
  $log->finish();

  variable_set('default_ultimate_cron_job_' . $name, $status ? TRUE : FALSE);
}

/**
 * Export UI save callback.
 *
 * Save a job and log it.
 *
 * @param UltimateCronJob &$object
 *   The UltimateCronJob to save.
 *
 * @return boolean
 *   Result of drupal_write_record().
 */
function ultimate_cron_job_save(&$object) {
  $table = 'ultimate_cron_job';
  $schema = ctools_export_get_schema($table);
  $export = $schema['export'];

  // Objects should have a serial primary key. If not, simply fail to write.
  if (empty($export['primary key'])) {
    return FALSE;
  }

  $key = $export['primary key'];
  if ($object->export_type & EXPORT_IN_DATABASE) {
    // Existing record.
    $update = array($key);
  }
  else {
    // New record.
    $update = array();
    $object->export_type = EXPORT_IN_DATABASE;
  }
  $result = drupal_write_record($table, $object, $update);

  $log = $object->startLog(uniqid($object->name, TRUE), 'modification');
  $log->log($object->name, 'Job modified by ' . $log->formatUser(), array(), WATCHDOG_INFO);
  $log->finish();

  return $result;
}

/**
 * Export UI delete callback.
 *
 * Revert a job and log it.
 *
 * @param mixed $object
 *   Name of job or UltimateCronJob object.
 */
function ultimate_cron_job_delete($object) {
  $table = 'ultimate_cron_job';
  $schema = ctools_export_get_schema($table);
  $export = $schema['export'];

  // If we were sent an object, get the export key from it. Otherwise
  // assume we were sent the export key.
  if (!is_object($object)) {
    $name = $object;
    if (!($object = ultimate_cron_job_load($name))) {
      throw new Exception(t('Unable to revert unknown job: @name', array(
        '@name' => $name,
      )));
    }
  }

  db_delete($table)
    ->condition($export['key'], $object->{$export['key']})
    ->execute();

  $log = $object->startLog(uniqid($object->name, TRUE), 'modification');
  $log->log($object->name, 'Job reverted by ' . $log->formatUser(), array(), WATCHDOG_INFO);
  $log->finish();
}

/**
 * Get status "callback".
 *
 * @param string $name
 *   Name of job.
 *
 * @return boolean
 *   TRUE if job is disabled.
 */
function ultimate_cron_job_get_status($name) {
  return variable_get('default_ultimate_cron_job_' . $name, NULL);
}

// ---------- HOOKS ----------

/**
 * Implements hook_init().
 *
 * Make sure we have the proper "last run" of cron in global $conf
 * for maximum compatibility with core.
 */
function ultimate_cron_init() {
  _ultimate_cron_variable_load('cron_last');
}

/**
 * Implements hook_help().
 *
 * @todo Please update this...
 */
function ultimate_cron_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ultimate_cron':
      // Return a line-break version of the module README.
      return '<pre>' . file_get_contents(dirname(__FILE__) . '/README.txt') . '</pre>';
  }
}

/**
 * Implements hook_menu().
 */
function ultimate_cron_menu() {
  $items = array();

  $items['admin/config/system/cron/settings'] = array(
    'title' => 'Settings',
    'description' => 'Cron settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ultimate_cron_settings_form'),
    'access arguments' => array('administer ultimate cron'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ultimate_cron.admin.inc',
  );

  $items['admin/config/system/cron/poorman'] = array(
    'title' => 'Poormans cron',
    'description' => 'Trigger poormans cron',
    'page callback' => 'ultimate_cron_poorman_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ultimate_cron.poorman.inc',
  );

  ctools_include('plugins');
  $plugin_types = ctools_plugin_get_plugin_type_info();
  $weight = 0;
  foreach ($plugin_types['ultimate_cron'] as $plugin_type => $info) {
    $static = $info['defaults']['static'];
    $class = $static['class'];
    $items["admin/config/system/cron/$plugin_type"] = array(
      'type' => MENU_LOCAL_TASK,
      'title' => $static['title plural proper'],
      'description' => "Administer " . $static['title plural'],
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ultimate_cron_plugin_form', $plugin_type),
      'access arguments' => array('administer ultimate cron'),
      'file' => 'ultimate_cron.admin.inc',
      'weight' => 2 + $weight,
    );
    $items["admin/config/system/cron/$plugin_type/settings"] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'title' => $class::$multiple ? 'List' : 'Settings',
      'weight' => -1 + $weight,
    );
    $weight++;
    foreach (ultimate_cron_plugin_load_all($plugin_type) as $name => $plugin) {
      if (!$plugin->isValid()) {
        continue;
      }
      $items["admin/config/system/cron/$plugin_type/$name"] = array(
        'type' => MENU_LOCAL_TASK,
        'title' => $plugin->title,
        'description' => $plugin->description,
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
          'ultimate_cron_plugin_settings',
          $plugin_type,
          $name
        ),
        'access arguments' => array('administer ultimate cron'),
        'file' => 'ultimate_cron.admin.inc',
        'weight' => $weight++,
      );
    }
  }

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Steal the run-cron, so when you "run cron manually" from the status-reports
 * page the ultimate_cron cron handler is run.
 */
function ultimate_cron_menu_alter(&$items) {
  // Relocate ctools export ui to main tab.
  $items['admin/config/system/cron'] = $items['admin/config/system/cron/jobs'];
  $items['admin/config/system/cron/jobs'] = array(
    'title' => 'Jobs',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 20,
  );
  unset($items['admin/config/system/cron']['type']);

  // Steal the core cron run.
  $steal = &$items['admin/reports/status/run-cron'];
  $steal['page callback'] = 'ultimate_cron_run_scheduled_page';
  $steal['page arguments'] = array();
  $steal['module'] = 'ultimate_cron';
  $steal['file'] = 'ultimate_cron.module';
}

/**
 * Implements hook_permission().
 */
function ultimate_cron_permission() {
  return array(
    'administer ultimate cron' => array(
      'title' => t('Administer Ultimate Cron'),
      'description' => t('Lets you configure everything in Ultimate Cron')
    )
  );
}

/**
 * Implements hook_cron_queue_info().
 *
 * Used for code injection in order to hijack cron runs.
 */
function ultimate_cron_cron_queue_info() {
  static $processed = FALSE;
  if (!$processed) {
    $processed = TRUE;
    if (basename($_SERVER['PHP_SELF']) == 'cron.php') {
      ultimate_cron_cron_run();
      exit;
    }
  }
  return array();
}


/**
 * Plugin clean up cron job.
 *
 * This is a cron callback for cleanup up plugins.
 *
 * @param UltimateCronJob $job
 *   The cron job being run.
 * @param array $arguments
 *   (optional) An array that can have one or more of the following elements:
 *   - type: The type of the plugin (settings, scheduler, launcher, logger).
 *   - name: The name of the plugin (queue, crontab, serial, database).
 */
function ultimate_cron_plugin_cleanup($job, $arguments) {
  $type = $arguments['type'];
  $name = $arguments['name'];
  $plugin = ultimate_cron_plugin_load($type, $name);
  $plugin->cleanup();
}

/**
 * Implements hook_cronapi().
 *
 * Exposes cron queues to Ultimate Cron and adds clean up jobs for plugins.
 */
function ultimate_cron_cronapi() {
  $items = array();

  ctools_include('plugins');
  $plugin_types = ctools_plugin_get_plugin_type_info();
  foreach ($plugin_types['ultimate_cron'] as $plugin_type => $info) {
    foreach (ultimate_cron_plugin_load_all($plugin_type) as $name => $plugin) {
      $items["ultimate_cron_plugin_{$plugin_type}_{$name}_cleanup"] = array(
        'title' => t('Ultimate Cron @type @title cleanup', array(
          '@type' => $info['defaults']['static']['title singular proper'],
          '@title' => $plugin->title,
        )),
        'callback' => 'ultimate_cron_plugin_cleanup',
        'callback arguments' => array(
          'type' => $plugin_type,
          'name' => $name,
        ),
      );
    }
  }

  // Grab the defined cron queues.
  $queues = _ultimate_cron_get_queues();

  foreach ($queues as $name => $info) {
    if (!empty($info['skip on cron'])) {
      continue;
    }

    $items['queue_' . $name] = array(
      'title' => t('Queue: !name', array('!name' => $name)),
      'callback' => 'ultimate_cron_queue_cron',
      'scheduler' => array(
        'simple' => array(
          'rules' => array('* * * * *'),
        ),
        'crontab' => array(
          'rules' => array('* * * * *'),
        ),
      ),
      'settings' => array(
        'queue' => array(
          'name' => $name,
          'worker callback' => $info['worker callback'],
        ),
      ),
      'tags' => array('queue'),
      'module' => $info['module'],
    );
    if (isset($info['time'])) {
      $items['queue_' . $name]['settings']['queue']['time'] = $info['time'];
    }
  }
  return $items;
}

/**
 * Process a cron queue.
 *
 * This is a wrapper around the cron queues "worker callback".
 *
 * @param UltimateCronJob $job
 *   The job being run.
 */
function ultimate_cron_queue_cron($job) {
  $settings = $job->getPluginSettings('settings');
  $queue = DrupalQueue::get($settings['queue']['name']);
  $function = $settings['queue']['worker callback'];

  // Re-throttle.
  $job->getPlugin('settings', 'queue')->throttle($job);

  $end = microtime(TRUE) + $settings['queue']['time'];
  $items = 0;
  while (microtime(TRUE) < $end) {
    $item = $queue->claimItem($settings['queue']['lease_time']);
    if (!$item) {
      if ($settings['queue']['empty_delay']) {
        usleep($settings['queue']['empty_delay'] * 1000000);
        continue;
      }
      else {
        break;
      }
    }
    try {
      if ($settings['queue']['item_delay']) {
        if ($items == 0) {
          // Move the boundary if using a throttle, to avoid waiting for nothing.
          $end -= $settings['queue']['item_delay'] * 1000000;
        }
        else {
          // Sleep before retrieving.
          usleep($settings['queue']['item_delay'] * 1000000);
        }
      }
      $function($item->data);
      $queue->deleteItem($item);
      $items++;
    }
    catch (Exception $e) {
      // Just continue ...
      watchdog($job->hook['module'], "Queue item @item_id from queue @queue failed with message @message", array(
        '@item_id' => $item->item_id,
        '@queue' => $settings['queue']['name'],
        '@message' => $e->getMessage()
      ), WATCHDOG_ERROR);
    }
  }
  watchdog($job->hook['module'], 'Processed @items items from queue @queue', array(
    '@items' => $items,
    '@queue' => $settings['queue']['name'],
  ), WATCHDOG_INFO);

  return;
}

/**
 * Implements hook_watchdog().
 *
 * Capture watchdog messages and send them to the loggers.
 */
function ultimate_cron_watchdog(array $log_entry) {
  UltimateCronLogger::hook_watchdog($log_entry);
}

// ---------- FIXUPS FOR CORE  ----------

/**
 * Implements hook_cron_alter().
 *
 * Add better description to core modules.
 */
function ultimate_cron_cron_alter(&$hooks) {
  $update['dblog_cron']['title'] = t('Remove expired log messages and flood control events');
  $update['field_cron']['title'] = t('Purges deleted Field API data');
  $update['filter_cron']['title'] = t('Expire outdated filter cache entries');
  $update['node_cron']['title'] = t('Mark old nodes as read');
  $update['search_cron']['title'] = t('Update indexes');
  $update['system_cron']['title'] = t('Cleanup (batch, flood, temp-files, etc.)');
  $update['aggregator_cron']['title'] = t('Refresh feeds');
  $update['openid_cron']['title'] = t('Remove expired nonces from the database');
  $update['ping_cron']['title'] = t('Notify remote sites');
  $update['poll_cron']['title'] = t('Close expired polls');
  $update['statistics_cron']['title'] = t('Reset counts and clean up');
  $update['trigger_cron']['title'] = t('Run actions for cron triggers');
  $update['tracker_cron']['title'] = t('Update tracker index');
  $update['update_cron']['title'] = t('Check system for updates');
  $update['dblog_cron']['configure'] = 'admin/config/development/logging';
  $update['ctools_cron']['title'] = t('Clean up old caches');

  foreach ($update as $name => $data) {
    if (isset($hooks[$name])) {
      foreach ($data as $key => $value) {
        $hooks[$name][$key] = $value;
      }
    }
  }
}

// ---------- CALLBACK FUNCTIONS ----------

/**
 * Run cron.
 *
 * The cron handler takes over the normal Drupal cron handler,
 * and runs the normal hook_cron() plus the hook_cronapi().
 */
function ultimate_cron_cron_run() {
  if (variable_get('install_task', FALSE) != 'done') {
    return;
  }

  // If run from core cron through CLI then don't do anything (drush core-cron)
  if (drupal_is_cli()) {
    return;
  }

  ultimate_cron_run_scheduled(FALSE);
  exit;
}

// ---------- HELPER FUNCTIONS ----------

/**
 * Load a variable by-passing the cache.
 *
 * We update the the cron_last variable once a minute. In order to avoid
 * clearing the variable cache every minute, we handle that variable
 * directly.
 *
 * @param string $name
 *   Name of variable to load.
 *
 * @return mixed
 *   Value of the variable. The value is also stored in the global static
 *   variables array, so variable_get() may retrieve the correct data
 *   afterwards.
 */
function _ultimate_cron_variable_load($name) {
  if ($value = db_query("SELECT value FROM {variable} WHERE name = :name", array(':name' => $name))->fetchField()) {
    $value = unserialize($value);
  }
  global $conf;
  $conf[$name] = $value;
  return $value;
}

/**
 * Load multiple variables by-passing the cache.
 *
 * We update the the cron_last variable once a minute. In order to avoid
 * clearing the variable cache every minute, we handle that variable
 * directly.
 *
 * @param array $names
 *   Names of variables to load.
 *
 * @return array
 *   Values of the variables. The values are also stored in the global static
 *   variables array, so variable_get() may retrieve the correct data
 *   afterwards.
 */
function _ultimate_cron_variable_load_multiple($names, $default = NULL) {
  $values = array();
  $result = db_query("SELECT name, value FROM {variable} WHERE name IN (:names)", array(':names' => $names))->fetchAllKeyed();
  global $conf;
  foreach ($names as $name) {
    $conf[$name] = $values[$name] = isset($result[$name]) ? unserialize($result[$name]) : $default;
  }
  return $values;
}

/**
 * Variable set with cache by-pass.
 *
 * We update the the cron_last variable once a minute. In order to avoid
 * clearing the variable cache every minute, we handle that variable
 * directly.
 *
 * The global static variables array is also updated, so variable_get()
 * may retrieve the correct data afterwards.
 *
 * @param string $name
 *   Name of variables to save.
 * @param mixed $value
 *   Value of the variable.
 */
function _ultimate_cron_variable_save($name, $value) {
  global $conf;
  db_merge('variable')->key(array('name' => $name))->fields(array('value' => serialize($value)))->execute();
  $conf[$name] = $value;
}

/**
 * Get cron queues and static cache them.
 *
 * Works like module_invoke_all('cron_queue_info'), but adds
 * a 'module' to each item.
 *
 * @return array
 *   Cron queue definitions.
 */
function _ultimate_cron_get_queues() {
  static $queues = NULL;
  if (!isset($queues)) {
    $queues = array();
    foreach (module_implements('cron_queue_info') as $module) {
      $items = module_invoke($module, 'cron_queue_info');
      if (is_array($items)) {
        foreach ($items as &$item) {
          $item['module'] = $module;
        }
        $queues += $items;
      }
    }
    drupal_alter('cron_queue_info', $queues);
  }
  return $queues;
}

/**
 * Cron easy hooks.
 *
 * Provide a default set of easy hooks.
 *
 * @return array
 *   Easy hooks.
 */
function ultimate_cron_easy_hooks() {
  static $easy_hooks;
  if (isset($easy_hooks)) {
    return $easy_hooks;
  }

  $easy_hooks = array(
    'cron' => array(
      'title' => 'Default cron job',
    ),
    'cron_hourly' => array(
      'title' => 'Hourly cron job',
      'scheduler' => array(
        'name' => 'crontab',
        'crontab' => array(
          'rules' => array('0+@ * * * *'),
        ),
      ),
    ),
    'cron_daily' => array(
      'title' => 'Daily cron job',
      'scheduler' => array(
        'name' => 'crontab',
        'crontab' => array(
          'rules' => array('0+@ 12 * * *'),
        ),
      ),
    ),
    'cron_nightly' => array(
      'title' => 'Nightly cron job',
      'scheduler' => array(
        'name' => 'crontab',
        'crontab' => array(
          'rules' => array('0+@ 0 * * *'),
        ),
      ),
    ),
    'cron_weekly' => array(
      'title' => 'Weekly cron job',
      'scheduler' => array(
        'name' => 'crontab',
        'crontab' => array(
          'rules' => array('0+@ 0 * * 1'),
        ),
      ),
    ),
    'cron_monthly' => array(
      'title' => 'Monthly cron job',
      'scheduler' => array(
        'name' => 'crontab',
        'crontab' => array(
          'rules' => array('0+@ 0 1 * *'),
        ),
      ),
    ),
    'cron_yearly' => array(
      'title' => 'Yearly cron job',
      'scheduler' => array(
        'name' => 'crontab',
        'crontab' => array(
          'rules' => array('0+@ 0 1 1 *'),
        ),
      ),
    ),
  );
  $easy_hooks += module_invoke_all('cron_easy_hooks');
  drupal_alter('cron_easy_hooks', $easy_hooks);
  return $easy_hooks;
}

/**
 * Get a specific cron hook.
 *
 * @param string $name
 *   Name of hook.
 * @param boolean $reset
 *   Reset static cache.
 *
 * @return array
 *   Hook definition.
 */
function ultimate_cron_get_hook($name, $reset = FALSE) {
  $hooks = ultimate_cron_get_hooks($reset);
  return $hooks[$name];
}

/**
 * Get cron hooks declared by a module.
 *
 * @param string $module
 *   Name of module.
 *
 * @return array
 *   Hook definitions for the specified module.
 */
function ultimate_cron_get_module_hooks($module) {
  $items = array();
  if (module_hook($module, 'cronapi')) {
    $items = module_invoke($module, 'cronapi', NULL);

    if (!is_array($items)) {
      // API Version 1.x
      $items = array();

      $list = module_invoke($module, 'cronapi', 'list');
      if (!$list) {
        $list = array();
      }
      foreach ($list as $name => $title) {
        $items[$name] = array('title' => $title);
      }
      foreach ($items as $name => &$item) {
        $item['api_version'] = 'ultimate_cron-1';
        $rules = module_invoke($module, 'cronapi', 'rule', $name);
        $rules = $rules ? $rules : array();

        $settings = (array) module_invoke($module, 'cronapi', 'settings', $name);
        if (empty($settings['rules']) && $rules) {
          $settings['rules'] = is_array($rules) ? $rules : array($rules);
        }

        if (!empty($settings['rules'])) {
          $settings['scheduler'] = array(
            'name' => 'crontab',
            'crontab' => array(
              'rules' => $settings['rules']
            ),
          );
          unset($settings['rules']);
        }

        $settings += array(
          'configure' => module_invoke($module, 'cronapi', 'configure', $name),
        );
        $item += $settings;
      }
    }
    else {
      foreach ($items as &$item) {
        if (!empty($item['rule'])) {
          // Elysia 2.x compatibility.
          $item['scheduler'] = array(
            'name' => 'crontab',
            'crontab' => array(
              'rules' => array($item['rule']),
            ),
          );
          $item['api_version'] = 'elysia_cron-2';
          $item['title'] = $item['description'];
        }
      }
    }
  }

  // Add hook_cron() if applicable.
  if (module_hook($module, 'cron')) {
    if (empty($items["{$module}_cron"])) {
      $items["{$module}_cron"] = array();
    }

    $info = system_get_info('module', $module);
    $items["{$module}_cron"] += array(
      'module' => $module,
      'title' => 'Default cron handler',
      'configure' => empty($info['configure']) ? NULL : $info['configure'],
    );
  }

  foreach (ultimate_cron_easy_hooks() as $name => $easy_hook) {
    $hook_name = "{$module}_{$name}";
    if (module_hook($module, $name)) {
      if (empty($items[$hook_name])) {
        $items[$hook_name] = array();
      }
      $items[$hook_name] += $easy_hook;

      $info = system_get_info('module', $module);
      $items[$hook_name] += array(
        'module' => $module,
        'title' => 'Easy hook ' . $name,
        'configure' => empty($info['configure']) ? NULL : $info['configure'],
      );
    }
  }

  // Add default settings.
  static $plugin_types;
  static $plugins;
  if (!isset($plugin_types)) {
    ctools_include('plugins');
    $plugin_types = ctools_plugin_get_plugin_type_info();
    $plugins = array();
    foreach ($plugin_types['ultimate_cron'] as $plugin_type => $info) {
      $plugins[$plugin_type] = ultimate_cron_plugin_load_all($plugin_type);
    }
  }

  foreach ($items as $name => &$item) {
    foreach ($plugin_types['ultimate_cron'] as $plugin_type => $info) {
      $static = $info['defaults']['static'];
      $class = $static['class'];
      $item += array(
        $plugin_type => array(),
      );
      if (!$class::$multiple) {
        $item[$plugin_type] += array(
          'name' => variable_get('ultimate_cron_plugin_' . $plugin_type . '_default', $static['default plugin']),
        );
      }

      foreach ($plugins[$plugin_type] as $plugin_name => $plugin) {
        if (!$plugin->isValid()) {
          continue;
        }
        $item[$plugin_type] += array(
          $plugin_name => array(),
        );
      }
    }

    $item += array(
      'title' => $name,
      'description' => isset($item['title']) ? $item['title'] : $name,
      'module' => $module,
      'file path' => drupal_get_path('module', isset($item['module']) ? $item['module'] : $module),
      'callback arguments' => array(),
      'callback' => $name,
      'enabled' => TRUE,
      'tags' => array(),
      'api_version' => 'ultimate_cron-2',
    );
  }

  return $items;
}

/**
 * Get all cron hooks defined.
 *
 * @param boolean $reset
 *   Reset static cache.
 *
 * @return array
 *   All hook definitions available.
 */
function ultimate_cron_get_hooks($reset = FALSE) {
  static $cache = NULL;
  if (!$reset && isset($cache)) {
    return $cache;
  }

  $cache = cache_get('ultimate_cron_hooks');
  if ($cache && $cache->data) {
    $cache = $cache->data;
    return $cache;
  }

  $hooks = array();
  // Generate list of jobs.
  $modules = module_list();
  foreach ($modules as $module) {
    $hooks += ultimate_cron_get_module_hooks($module);
  }

  // Allow other to manipulate the hook list.
  drupal_alter('cron', $hooks);

  $cache = $hooks;
  cache_set('ultimate_cron_hooks', $cache);
  return $cache;
}

// ---------- CRON RULE FUNCTIONS ----------

/**
 * Form element validator for cron rules.
 */
function ultimate_cron_plugin_crontab_element_validate_rule($element, &$form_state) {
  $rules = array();
  $value = $element['#value'];
  if (!empty($value)) {
    $rules = explode(',', $value);
    $rules = array_map('trim', $rules);
  }
  foreach ($rules as $rule) {
    if (!ultimate_cron_validate_rule($rule)) {
      form_error($element, t('%name: %rule is not a valid rule.', array('%name' => $element['#title'], '%rule' => $rule)));
    }
  }
}

/**
 * Check if rule is valid.
 *
 * @param string $rule
 *   rule to validate.
 *
 * @return bool
 *   TRUE if valid, FALSE if not.
 */
function ultimate_cron_validate_rule($rule) {
  require_once 'CronRule.class.php';
  $cron = CronRule::factory($rule);
  if (!$cron->isValid()) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Return blank values for all keys in an array.
 *
 * @param array $array
 *   Array to generate blank values from.
 *
 * @return array
 *   Array with same keys as input, but with blank values (empty string).
 */
function ultimate_cron_blank_values($array) {
  $result = array();
  foreach ($array as $key => $value) {
    switch (gettype($value)) {
      case 'array':
        $result[$key] = array();
        break;

      default:
        $result[$key] = '';
    }
  }
  return $result;
}

/**
 * Page callback for running scheduled jobs.
 */
function ultimate_cron_run_scheduled_page() {
  ultimate_cron_run_scheduled(TRUE);
  if (isset($_SERVER['HTTP_REFERER']) && empty($_GET['destination'])) {
    $_GET['destination'] = parse_url($_SERVER['HTTP_REFERER'], PHP_URL_PATH);
  }
  drupal_goto('admin/config/system/cron');
}

/**
 * Run scheduled jobs.
 *
 * @param boolean $set_message
 *   Set Drupal system message instead of watchdog logging.
 */
function ultimate_cron_run_scheduled($set_message = TRUE) {
  if (!variable_get('maintenance_mode', 0)) {
    $launchers = array();
    foreach (ultimate_cron_job_load_all() as $job) {
      $launchers[$job->getPlugin('launcher')->name] = TRUE;
    }
    if (empty($launchers)) {
      ultimate_cron_watchdog_message('ultimate_cron', 'No launchers to invoke?', array(), WATCHDOG_ERROR, 'error', $set_message);
      return;
    }
    $settings = ultimate_cron_plugin_load('settings', 'general')->getDefaultSettings();
    $dispatch = $set_message || count($launchers) > 1;

    foreach (array_keys($launchers) as $launcher) {
      $plugin = ultimate_cron_plugin_load('launcher', $launcher);
      if (!$plugin) {
        ultimate_cron_watchdog_message('ultimate_cron', 'Launcher @name not found!', array(
          '@name' => $launcher,
        ), WATCHDOG_ERROR, 'error', $set_message);
        return;
      }

      if ($settings['poorman'] && $dispatch) {
        ultimate_cron_poorman_launcher($plugin->name);
      }
      else {
        ultimate_cron_run_launcher($plugin);
      }

      ultimate_cron_watchdog_message('ultimate_cron', 'Launcher @title invoked', array(
        '@title' => $plugin->title,
      ), WATCHDOG_INFO, 'status', $set_message);
    }
  }
  else {
    ultimate_cron_watchdog_message('ultimate_cron', 'Cannot launch scheduled jobs while in maintenance mode!', array(), WATCHDOG_ERROR, 'error', $set_message);
  }
  return;
}

/**
 * Log message either to watchdog or to screen.
 *
 * @param $type
 *   The category to which this message belongs. Can be any string, but the
 *   general practice is to use the name of the module calling watchdog().
 * @param $message
 *   The message to store in the log. Keep $message translatable
 *   by not concatenating dynamic values into it! Variables in the
 *   message should be added by using placeholder strings alongside
 *   the variables argument to declare the value of the placeholders.
 *   See t() for documentation on how $message and $variables interact.
 * @param $variables
 *   Array of variables to replace in the message on display or
 *   NULL if message is already translated or not possible to
 *   translate.
 * @param $severity
 *   The severity of the message; one of the following values as defined in
 *   @link http://www.faqs.org/rfcs/rfc3164.html RFC 3164: @endlink
 *   - WATCHDOG_EMERGENCY: Emergency, system is unusable.
 *   - WATCHDOG_ALERT: Alert, action must be taken immediately.
 *   - WATCHDOG_CRITICAL: Critical conditions.
 *   - WATCHDOG_ERROR: Error conditions.
 *   - WATCHDOG_WARNING: Warning conditions.
 *   - WATCHDOG_NOTICE: (default) Normal but significant conditions.
 *   - WATCHDOG_INFO: Informational messages.
 *   - WATCHDOG_DEBUG: Debug-level messages.
 * @param string $status
 *   The message's type.
 *   supported:
 *   - 'status'
 *   - 'warning'
 *   - 'error'
 *  @param boolean $set_message
 *    Use drupal_set_message() instead of watchdog logging.
 */
function ultimate_cron_watchdog_message($type, $msg, $args, $severity, $status, $set_message) {
  if ($set_message) {
    drupal_set_message(t($msg, $args), $status);
  }
  else {
    watchdog($type, $msg, $args, $severity);
  }
}

/**
 * Custom sort callback for sorting cron jobs by start time.
 */
function _ultimate_cron_sort_jobs_by_start_time($a, $b) {
  return $a->log_entry->start_time == $b->log_entry->start_time ? 0 : ($a->log_entry->start_time > $b->log_entry->start_time ? 1 : -1);
}

/**
 * Stripped debug backtrace.
 *
 * For debugging purposes of course ...
 */
function stripped_debug_backtrace() {
  $debug = debug_backtrace();
  foreach ($debug as &$d) unset($d['args'], $d['object']);
  return $debug;
}
