<?php
/**
 * @file
 * Installation file for Ultimate Cron
 */

/**
 * Implements hook_schema().
 */
function ultimate_cron_schema() {
  $schema = array();

  $schema['ultimate_cron_job'] = array(
    'description' => 'Cron jobs',
    'export' => array(
      'admin_title' => 'title',
      'key' => 'name',
      'primary key' => 'jid',
      'identifier' => 'job',
      'load callback' => 'ultimate_cron_job_load',
      'load all callback' => 'ultimate_cron_job_load_all',
      'object' => 'UltimateCronJob',
      'api' => array(
        'owner' => 'ultimate_cron',
        'api' => 'ultimate_cron',
        'minimum_version' => 3,
        'current_version' => 3,
      ),
      'in_code_only' => TRUE,
    ),
    'fields' => array(
      'jid' => array(
        'description' => 'Job ID',
        'type' => 'serial',
        'size' => 'normal',
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'name' => array(
        'description' => 'Name',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'Title',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
        'default' => '',
      ),
      'settings' => array(
        'description' => 'Settings',
        'type' => 'text',
        'serialize' => TRUE,
        'not null' => FALSE,
        'object default' => array(
          'scheduler' => array(),
          'launcher' => array(),
          'logger' => array(),
          'settings' => array(),
        ),
      ),
    ),
    'primary key' => array('jid'),
    'unique keys' => array(
      'machine_name' => array('name')
    ),
  );

  $schema['ultimate_cron_log'] = array(
    'description' => 'Logs',
    'fields' => array(
      'lid' => array(
        'description' => 'Lock ID',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Name',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
      ),
      'start_time' => array(
        'description' => 'Timestamp of execution start',
        'type' => 'float',
        'size' => 'big',
        'not null' => TRUE,
        'default' => 0,
      ),
      'end_time' => array(
        'description' => 'Timestamp of execution end',
        'type' => 'float',
        'size' => 'big',
        'not null' => TRUE,
        'default' => 0,
      ),
      'init_message' => array(
        'description' => 'Initial message',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'message' => array(
        'description' => 'Message',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'severity' => array(
        'description' => 'Max severity level of the execution',
        'type' => 'int',
        'size' => 'normal',
        'not null' => FALSE,
        'default' => -1,
      ),
    ),
    'primary key' => array('lid'),
    'indexes' => array(
      'idx_last' => array(
        'name',
        'start_time',
        'end_time',
      ),
    ),
  );

  $schema['ultimate_cron_lock'] = array(
    'description' => 'Locks',
    'fields' => array(
      'lid' => array(
        'description' => 'Lock ID',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Name',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'current' => array(
        'description' => 'Current lock',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'expire' => array(
        'description' => 'Expiration time of lock',
        'type' => 'float',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('lid'),
    'unique keys' => array(
      'idx_name' => array('name', 'current'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_enable().
 */
function ultimate_cron_enable() {
  // Disable built-in poor mans cron.
  variable_set('cron_safe_threshold', 0);
}

/**
 * Implements hook_uninstall().
 */
function ultimate_cron_uninstall() {
  variable_del('ultimate_cron_simultaneous_connections');
  variable_del('ultimate_cron_rule');
  variable_del('ultimate_cron_cleanup_log');
  variable_del('ultimate_cron_catch_up');
  variable_del('ultimate_cron_queue_polling_latency');
  variable_del('ultimate_cron_queue_lease_time');
  variable_del('ultimate_cron_poorman');
  variable_del('ultimate_cron_launch_window');
  variable_del('ultimate_cron_max_execution_time');
}


/**
 * Implements hook_requirements().
 */
function ultimate_cron_requirements($phase) {
  $response = array();
  switch ($phase) {
    case 'install':
      return $response;

    case 'runtime':
      $response['title'] = 'Ultimate Cron';
      $response['value'] = 'OK';
      $response['severity'] = REQUIREMENT_OK;
      $result = array();
      $result['ultimate_cron'] = $response;
      return $result;
  }
}

/**
 * Major version upgrade of Drupal.
 */
function ultimate_cron_update_7000(&$context) {
  $context['sandbox']['major_version_upgrade'] = array();
}

/**
 * Move messages to log table.
 */
function ultimate_cron_update_7101(&$context) {
  if (empty($context['sandbox']['major_version_upgrade'][7101])) {
    // This udate is already part of latest 6.x
    return;
  }
  $schema_version = (int) (db_query("SELECT schema_version FROM {system} WHERE name = 'ultimate_cron'")->fetchField());
  if ($schema_version >= 7000) {
    // Old hook_update_N was 7000
    return;
  }
  db_add_field('ultimate_cron_log', 'msg', array(
    'description' => 'Message',
    'type' => 'text',
    'not null' => FALSE,
  ));
  db_query("UPDATE {ultimate_cron_log} l JOIN {ultimate_cron_log_message} m ON l.lid = m.lid SET l.msg = m.msg");
  db_drop_table('ultimate_cron_log_message');
}

/**
 * Convert polling latenct from microseconds to miliseconds.
 */
function ultimate_cron_update_7102(&$context) {
  if (empty($context['sandbox']['major_version_upgrade'][7102])) {
    // This udate is already part of latest 6.x
    return;
  }
  $schema_version = (int) (db_query("SELECT schema_version FROM {system} WHERE name = 'ultimate_cron'")->fetchField());
  if ($schema_version >= 7001) {
    // Old hook_update_N was 7001
    return;
  }
  // Convert polling latency from microseconds to miliseconds.
  $polling_latency = variable_get('ultimate_cron_queue_polling_latency', NULL);
  if ($polling_latency) {
    $polling_latency /= 1000;
    variable_set('ultimate_cron_queue_polling_latency', $polling_latency);
  }
}

/**
 * Merge ultimate_cron_function and ultimate_cron_configuration into ultimate_cron.
 */
function ultimate_cron_update_7103(&$context) {
  if (empty($context['sandbox']['major_version_upgrade'][7103])) {
    // This udate is already part of latest 6.x
    return;
  }
  $schema_version = (int) (db_query("SELECT schema_version FROM {system} WHERE name = 'ultimate_cron'")->fetchField());
  if ($schema_version >= 7002) {
    // Old hook_update_N was 7002
    return;
  }
  $schema = ultimate_cron_schema();
  db_create_table('ultimate_cron', $schema['ultimate_cron']);
  db_query("INSERT INTO {ultimate_cron} SELECT f.fid, f.function, c.configuration AS settings FROM ultimate_cron_function f LEFT JOIN {ultimate_cron_configuration} c ON f.fid = c.fid");
  db_drop_table('ultimate_cron_function');
  db_drop_table('ultimate_cron_configuration');
}

/**
 * Switch from fid to function name in ultimate_cron_log.
 */
function ultimate_cron_update_7104(&$context) {
  if (empty($context['sandbox']['major_version_upgrade'][7104])) {
    // This udate is already part of latest 6.x
    return;
  }
  $schema_version = (int) (db_query("SELECT schema_version FROM {system} WHERE name = 'ultimate_cron'")->fetchField());
  if ($schema_version >= 7003) {
    // Old hook_update_N was 7003
    return;
  }
  db_add_field('ultimate_cron_log', 'function', array(
        'description' => 'Function name',
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
        'initial' => 'function',
      ));
  $fids = db_select('ultimate_cron_log', 'u')->fields('u', array('fid'))->distinct()->execute();
  while ($fid = $fids->fetchObject()) {
    $function = db_select('ultimate_cron', 'u')->fields('u', array('function'))->condition('fid', $fid->fid, '=')->execute()->fetchObject();
    db_update('ultimate_cron_log')->fields(array('function' => $function->function))->condition('fid', $fid->fid, '=')->execute();
  }
  db_drop_field('ultimate_cron_log', 'fid');
  db_drop_index('ultimate_cron_log', 'idx_last');
  db_drop_index('ultimate_cron_log', 'idx_count');
  db_add_index('ultimate_cron_log', 'idx_last', array('function', 'start'));
  db_add_index('ultimate_cron_log', 'idx_count', array('function', 'end'));
}

/**
 * Add missing index to database.
 */
function ultimate_cron_update_7105(&$context) {
  if (empty($context['sandbox']['major_version_upgrade'][7105])) {
    // This udate is already part of latest 6.x
    return;
  }
  $items = db_select('ultimate_cron')
    ->fields('ultimate_cron', array('fid', 'function'))
    ->orderBy('fid', 'ASC')
    ->execute()
    ->fetchAllAssoc('fid', PDO::FETCH_ASSOC);
  $fids = array();
  $keep = array();
  foreach ($items as $item) {
    if (isset($keep[$item['function']])) {
      $fids[] = $keep[$item['function']];
    }
    $keep[$item['function']] = $item['fid'];
  }
  if ($fids) {
    db_delete('ultimate_cron')
      ->condition('fid', $fids)
      ->execute();
  }
  db_add_unique_key('ultimate_cron', 'uniq_function', array('function'));
}

/**
 * Change schema to SQL 99 compliance.
 */
function ultimate_cron_update_7106(&$context) {
  if (empty($context['sandbox']['major_version_upgrade'][7106])) {
    // This udate is already part of latest 6.x
    return;
  }
  db_drop_unique_key('ultimate_cron', 'idx_function');
  db_change_field('ultimate_cron', 'function', 'name', array(
    'description' => 'Function name',
    'type' => 'varchar',
    'length' => 127,
    'not null' => TRUE,
  ));
  db_add_unique_key('ultimate_cron', 'idx_name', array('name'));

  db_change_field('ultimate_cron_log', 'function', 'name', array(
    'description' => 'Function name',
    'type' => 'varchar',
    'length' => 127,
    'not null' => TRUE,
  ));
  db_change_field('ultimate_cron_log', 'start', 'start_stamp', array(
    'description' => 'Timstamp of execution start',
    'type' => 'float',
    'size' => 'big',
    'not null' => TRUE,
    'default' => 0,
  ));
  db_change_field('ultimate_cron_log', 'end', 'end_stamp', array(
    'description' => 'Timstamp of execution end',
    'type' => 'float',
    'size' => 'big',
    'not null' => TRUE,
    'default' => 0,
  ));
  db_change_field('ultimate_cron_log', 'status', 'exec_status', array(
    'description' => 'Status of the execution',
    'type' => 'int',
    'size' => 'normal',
    'not null' => FALSE,
    'default' => NULL,
  ));
}

/**
 * Add service host to log.
 */
function ultimate_cron_update_7107(&$context) {
  if (empty($context['sandbox']['major_version_upgrade'][7107])) {
    // This udate is already part of latest 6.x
    return;
  }
  db_add_field('ultimate_cron_log', 'service_host', array(
    'description' => 'Service host',
    'type' => 'varchar',
    'length' => 127,
    'not null' => TRUE,
  ));
}

/**
 * Rename columns and indices to 2.x style.
 */
function ultimate_cron_update_7200() {
  $schema = drupal_get_schema('ultimate_cron_lock', TRUE);
  db_create_table('ultimate_cron_lock', $schema);
  $schema = drupal_get_schema('ultimate_cron_job', TRUE);
  db_create_table('ultimate_cron_job', $schema);

  // New table is ready. Let's migrate the settings.
  ctools_include('export');
  $old_jobs = db_query("SELECT * FROM {ultimate_cron}");
  $jobs = ultimate_cron_job_load_all();

  foreach ($old_jobs as $old_job) {
    $name = $old_job->name;
    $old_job->settings = unserialize($old_job->settings);

    if (isset($jobs[$name])) {
      $jobs[$name]->settings['scheduler'] = array(
        'name' => 'crontab',
        'crontab' => array()
      );
      if (!empty($old_job->settings['rules'])) {
        $jobs[$name]->settings['scheduler']['crontab']['rules'] = $old_job->settings['rules'];
      }
      if (!empty($old_job->settings['catch_up'])) {
        $jobs[$name]->settings['scheduler']['crontab']['catch_up'] = $old_job->settings['catch_up'];
      }

      $jobs[$name]->settings['launcher'] = array(
        'name' => 'background_process_legacy',
        'background_process_legacy' => array()
      );
      if (!empty($old_job->settings['catch_up'])) {
        $jobs[$name]->settings['launcher']['background_process_legacy']['service_group'] = $old_job->settings['service_group'];
      }

      ctools_export_crud_save('ultimate_cron_job', $jobs[$name]);
    }

    $status = isset($old_job->settings['enabled']) ? $old_job->settings['enabled'] : TRUE;
    ctools_export_set_status('ultimate_cron_job', $name, !$status);
  }

  // Don't need the old one anymore.
  db_drop_table('ultimate_cron');

  // Update log table to new format.
  db_drop_field('ultimate_cron_log', 'exec_status');
  db_drop_index('ultimate_cron_log', 'idx_last');
  db_drop_index('ultimate_cron_log', 'idx_count');
  db_change_field('ultimate_cron_log', 'lid', 'lid', array(
    'description' => 'Lock ID',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
  ));
  db_change_field('ultimate_cron_log', 'start_stamp', 'start_time', array(
    'description' => 'Timestamp of execution start',
    'type' => 'float',
    'size' => 'big',
    'not null' => TRUE,
    'default' => 0
  ));
  db_change_field('ultimate_cron_log', 'end_stamp', 'end_time', array(
    'description' => 'Timestamp of execution start',
    'type' => 'float',
    'size' => 'big',
    'not null' => TRUE,
    'default' => 0
  ));
  db_change_field('ultimate_cron_log', 'service_host', 'init_message', array(
    'description' => 'Initial message',
    'type' => 'text',
    'not null' => FALSE,
  ));
  db_change_field('ultimate_cron_log', 'msg', 'message', array(
    'description' => 'Message',
    'type' => 'text',
    'not null' => FALSE,
  ));

  db_add_index('ultimate_cron_log', 'idx_last', array(
    'name',
    'start_time',
    'end_time'
  ));

  variable_set('ultimate_cron_plugin_scheduler_default', 'crontab');
  variable_set('ultimate_cron_plugin_launcher_default', 'background_process_legacy');
}
